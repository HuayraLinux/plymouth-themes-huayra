# Gradiente de fondo
gradiente = Image("gradiente.png");

# En el caso de no usarse en una netbook, Huayra debe reconocer y escalar a la resolucion correcta

ancho_pantalla = Window.GetWidth();
altura_pantalla = Window.GetHeight();

grad_rescalado = gradiente.Scale(ancho_pantalla, altura_pantalla);

gradiente_sprite = Sprite(grad_rescalado);

gradiente_sprite.SetX(Window.GetWidth() / 2 - grad_rescalado.GetWidth() / 2);
gradiente_sprite.SetY(Window.GetHeight() / 2 - grad_rescalado.GetHeight() / 2);
gradiente_sprite.SetZ(-100000);

# Carga frames de animacion
for (i = 0; i < 40; i++)
    timer_imagenes[i] = Image("roseta_" + i + ".png");
timer_sprite = Sprite();

timer_sprite.SetX(Window.GetWidth() / 2 - timer_imagenes[1].GetWidth() / 2);
timer_sprite.SetY(Window.GetHeight() * 0.85 - timer_imagenes[1].GetHeight() / 2);
timer_sprite.SetZ(11);
timer_sprite.SetOpacity(0.5);

# Carga logo Huayra
huayra_logo = Image("logo.png");
logo_sprite = Sprite(huayra_logo);

logo_sprite.SetX(Window.GetWidth() / 2 - huayra_logo.GetWidth() / 2);
logo_sprite.SetY(Window.GetHeight() * 0.4 - huayra_logo.GetHeight() / 2);
logo_sprite.SetZ(10);
logo_sprite.SetOpacity(0.2);


# Add your code here
alfa = 0.0;
bucle = 0;
cuadros = 0;


fsck_running = 0;
fsck_dev_array;
fsck_dev_counter = 0;
fsck_fade_in_counter = 0;
fsck_done_fading = 0;

stars_array;
stars_n = 0;

//full_msg = "";
msgs_line;

fun refresh_callback()
  {
     timer_sprite.SetImage(timer_imagenes[cuadros]);
     cuadros++;
     if (cuadros > 39){
         cuadros = 0;
         }
     logo_sprite.SetOpacity(alfa/100);
     bucle++;
     if (bucle < 100){     
         alfa++;
         }
     else{
	 alfa--;
	 }
     if(bucle>200){
	 bucle = 0;
         }
  }

Plymouth.SetRefreshFunction (refresh_callback);



#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
}

Plymouth.SetQuitFunction(quit_callback);





/*
 * This function will display the most current message */
fun messageHandler(msg) {
		
	if (msg.SubString(0, 5) == "keys:") {
	
		msg = msg.SubString(5, strlen(msg));
	
	}
	
	if (msg == "Restarting system...") {
		msg = "Reiniciando Huayra GNU/Linux...";
	}

	if (msg == "Shutting down system...") {
		msg = "Apagando la computadora...";
	}

	msgs_line[0] = Sprite(Image.Text(msg, 1, 1, 1, 1, "DejaVu Bold 12"));
	
	msgs_line[0].SetPosition((ancho_pantalla / 2) - (msgs_line[0].GetImage().GetWidth() / 2), (altura_pantalla - msgs_line[0].GetImage().GetHeight()) - 20, 10000);



}

Plymouth.SetMessageFunction(messageHandler);

/**/

/*
 * Handles the updates passed to the plymouth daemon
 * for example the FSCK data */
fun statusHandler(status) {
	
	tmp_char;
	status_array[0] = "";
	elem_count = 0;
	
	for (i = 0; String(status).CharAt(i) != ""; i++) {
	
		tmp_char = String(status).CharAt(i);
		
		if (tmp_char != ":") {
		
			status_array[elem_count] += tmp_char;
		
		}
		else {
			
			elem_count++;
			status_array[elem_count] = "";
			
		}
		
	}

	if (status_array[0] == "fsck") {
	
		already_added = 0;
		
		if (fsck_running == 0) {
			
			/*
			 * use the dedicated message handler for this
			 * since there is no messages about fsck checks
			 * currently... */
			messageHandler("Chequeando disco rigido, esta operaci√≥n puede tardar. Presiona 'C' para abortar el chequeo");
			
			fsck_running = 1;
			
		}	
	}
	if (status_array[0] == "") {
		messageHandler("");
	}
}

Plymouth.SetUpdateStatusFunction(statusHandler);

